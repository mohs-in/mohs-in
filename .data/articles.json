{"posts":[{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"_id":"68827909ec1bda8f3467e3fc","createdAt":"2025-07-24T18:18:49.031Z","updatedAt":"2025-07-24T18:26:31.231Z","views":10,"isActive":true,"hasLatex":false,"popularity":7652.6651,"discussionScore":0,"enableToc":true,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":true,"disableComments":true,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Introduction to Computer Networks: Key Concepts and Basics","cuid":"cmdhpupty000c02jv4fffd6se","dateAdded":"2025-07-24T18:18:49.030Z","isCoverAttributionHidden":false,"coverImageAttribution":"https://unsplash.com/@tvick","coverImagePhotographer":"Taylor Vick","stickCoverToBottom":false,"slug":"introduction-to-computer-networks-key-concepts-and-basics","toc":[[{"id":"7ff2673a-f48a-4ead-8adb-f29f0415db21","level":2,"previousLevel":null,"parentId":null,"slug":"why-learn-computer-networks","title":"Why Learn Computer Networks?"}],[{"id":"7bbb037d-880c-4680-a148-2d0db8061d26","level":2,"previousLevel":2,"parentId":null,"slug":"osi-model-open-systems-interconnection","title":"OSI Model ( Open-Systems-Interconnection )"}],[{"id":"2eee4911-6847-4cd1-b6c4-817ff493d479","level":3,"previousLevel":2,"parentId":"7bbb037d-880c-4680-a148-2d0db8061d26","slug":"philosopher-translator-secretary-architecture","title":"Philosopher - Translator - Secretary Architecture"}],[{"id":"c6701ccb-7952-42f8-81aa-b4cfc737237e","level":3,"previousLevel":3,"parentId":"7bbb037d-880c-4680-a148-2d0db8061d26","slug":"application-layer-layer-7","title":"Application Layer (Layer 7)"}],[{"id":"4838daca-28a3-4d4d-bd80-b70a52d06210","level":3,"previousLevel":3,"parentId":"7bbb037d-880c-4680-a148-2d0db8061d26","slug":"presentation-layer-layer-6","title":"Presentation Layer (Layer 6)"}],[{"id":"dcedc9eb-e138-45ad-b3ba-e93602eca4ce","level":3,"previousLevel":3,"parentId":"7bbb037d-880c-4680-a148-2d0db8061d26","slug":"session-layer-layer-5","title":"Session Layer (Layer 5)"}],[{"id":"388ae7cd-b07d-4110-a1ae-fd98ee957fbe","level":3,"previousLevel":3,"parentId":"7bbb037d-880c-4680-a148-2d0db8061d26","slug":"transport-layer-layer-4","title":"Transport Layer (Layer 4)"}],[{"id":"7516d4e5-a0f3-4ae8-a88d-5506d9743657","level":3,"previousLevel":3,"parentId":"7bbb037d-880c-4680-a148-2d0db8061d26","slug":"network-layer-layer-3","title":"Network Layer (Layer 3)"}],[{"id":"b36fbed8-5329-48d5-91d3-25cecf92e54d","level":3,"previousLevel":3,"parentId":"7bbb037d-880c-4680-a148-2d0db8061d26","slug":"data-link-layer-layer-2","title":"Data Link Layer (Layer 2)"}],[{"id":"a9419589-684b-46d5-986a-b75025618d99","level":3,"previousLevel":3,"parentId":"7bbb037d-880c-4680-a148-2d0db8061d26","slug":"physical-layer-layer-1","title":"Physical Layer (Layer 1)"}],[{"id":"45a008a6-126d-40a7-954c-aa5d2b3046c7","level":2,"previousLevel":3,"parentId":null,"slug":"tcp-vs-udp","title":"TCP vs UDP"}],[{"id":"b48b50a1-46f3-4890-842a-aa33030230a4","level":2,"previousLevel":2,"parentId":null,"slug":"osi-model-vs-tcpip","title":"OSI Model vs TCP/IP"}]],"content":"<p><strong>Imagine waking up in a world without the internet:</strong></p>\n<ul>\n<li><p>No way to instantly message your friends or see what‚Äôs trending on social media.</p>\n</li>\n<li><p>No ability to stream music, attend virtual classes, or play online games.</p>\n</li>\n<li><p>No quick access to information, collaboration tools, or even emailing for work or school.</p>\n</li>\n<li><p>Forget about video calls with loved ones across the world</p>\n</li>\n</ul>\n<p><strong>Well, that's the world without computer networks.</strong></p>\n<h2 id=\"heading-why-learn-computer-networks\">Why Learn Computer Networks?</h2>\n<p>Simple answer: to do all the things we couldn‚Äôt do in a world without them.</p>\n<p>Whether it‚Äôs browsing the web, sending messages, working remotely, streaming videos, or making video calls, computer networks are the backbone that make modern life seamless and connected. Every device‚Äîlaptop, desktop, smartphone, smartwatch, or tablet‚Äîis a different form of a computer.</p>\n<p>Regardless of your career path‚Äîwhether you're a Software Development Engineer (SDE), Big Data Engineer, Network Engineer, or any other role in tech‚Äî<strong>understanding computer network fundamentals is essential</strong>.</p>\n<p>Learning computer networks means understanding the hidden ‚Äúplumbing‚Äù that powers our digital world.</p>\n<h2 id=\"heading-osi-model-open-systems-interconnection\">OSI Model ( Open-Systems-Interconnection )</h2>\n<p>Also referred to as a reference model, this model provides a high-level overview of how data is transmitted from one computer to another.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1753359381396/7cb9ec76-e91f-426a-b639-2fde802eec24.png\" alt class=\"image--center mx-auto\" /></p>\n<ul>\n<li><p>Anything that is a part of the network that wants to communicate is called a <strong><em>Host</em></strong>.</p>\n</li>\n<li><p><strong><em>The server</em></strong> is a special type of computer. It is also a Host when receiving data from clients. The server is something that a host receives data from.</p>\n</li>\n<li><p>The OSI Model was finalized between the 1970s and 1980s. And it is a reference model, which means it acts as a reference guide to implement or form the network in the real world.</p>\n</li>\n<li><p>Based on the OSI model, the exact model that is implemented in the real world is the <strong>TCP/IP Model</strong>.</p>\n</li>\n<li><p>The <strong>OSI Model</strong> has <strong>7 different layers</strong>. And each layer has a bunch of protocols that need to be followed to implement a network in the real world.</p>\n</li>\n<li><p><strong>Protocols</strong> ‚Äî A set of rules that everyone needs to agree upon.</p>\n</li>\n</ul>\n<h3 id=\"heading-philosopher-translator-secretary-architecture\">Philosopher - Translator - Secretary Architecture</h3>\n<p>OSI model is based on the architecture of philosopher-translator-secretary.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1753378922692/807452aa-2dd3-42cf-b378-fc159bf3f803.png\" alt class=\"image--center mx-auto\" /></p>\n<p>In this architecture, there are two philosophers (A and B) in different locations, and they don‚Äôt speak the same language and want to transmit a message. So, some steps need to be followed by both to successfully send the message.</p>\n<ul>\n<li><p>Philosopher A gives the message to his secretary, and the secretary will convert the message into a common language that can be understood by the secretary in both locations.</p>\n</li>\n<li><p>Then the converted message will be sent through Fax to Location B. And the secretary in location B will understand the message and pass it to the philosopher in the language the philosopher understands.</p>\n</li>\n</ul>\n<p>So, this way communication happens in this architecture. So, the same is followed in the OSI Model. Each layer states the different protocols that need to be followed for the successful transmission of the message.</p>\n<p>Now, let‚Äôs look at the different layers in the OSI Model</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1753379172076/9217c0fa-ec51-4415-a422-6078b1639133.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Now, let‚Äôs briefly look at what each layer is,</p>\n<h3 id=\"heading-application-layer-layer-7\">Application Layer (Layer 7)</h3>\n<ul>\n<li><p>Browser ‚Üí HTTPS / FTP (File Transfer Protocol)</p>\n</li>\n<li><p>Outlook ‚Üí SMTP (Simple Mail Transfer Protocol)</p>\n</li>\n<li><p>Skype ‚Üí Skype protocol</p>\n</li>\n<li><p>Remote Desktop ‚Üí Telnet for Unix-based systems), RDP (Remote Desktop Protocol)</p>\n</li>\n</ul>\n<p>The application layer has a bunch of protocols that are used for various tasks. Outlook uses SMTP for mail transfers and HTTPS to fetch a web page securely.</p>\n<h3 id=\"heading-presentation-layer-layer-6\">Presentation Layer (Layer 6)</h3>\n<p>The presentation layer is mostly responsible for</p>\n<ul>\n<li><p><strong>Translation</strong></p>\n<p>  Translates data received from the application layer into the form of ASCII or binary</p>\n<ul>\n<li><p>e.g</p>\n<ul>\n<li><p>Data: Hello o ASCII: 72 101 108 108 111</p>\n</li>\n<li><p>Binary: 01001000 01100101 01101100 01101100 01101111</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Data Compression</strong></p>\n<p>  Suppose after translation we get 1MB of Data. So, Data Compression tries to reduce the size of the data without much loss because the less the size is the faster transmission can happen over the network.</p>\n</li>\n<li><p><strong>Encryption</strong></p>\n<p>  Encrypts the data so that it can‚Äôt be misused. HTTPS uses SSL (Secure Socket Layer), which is a cryptographic protocol designed to provide communications security over a computer network.</p>\n</li>\n</ul>\n<h3 id=\"heading-session-layer-layer-5\">Session Layer (Layer 5)</h3>\n<div data-node-type=\"callout\">\n<div data-node-type=\"callout-emoji\">üí°</div>\n<div data-node-type=\"callout-text\">These days, most modern browsers manage (Application, Presentation, Session layers)</div>\n</div>\n\n<ul>\n<li><p><strong>Establish</strong>, <strong>manage,</strong> and <strong>terminate</strong> connections.</p>\n<ul>\n<li><p>Establishment of a connection means making a connection in which both server and client have agreed to transfer the data.</p>\n</li>\n<li><p>Managing connection states, getting knowledge of the connections that were established, and the data transfer can be done effectively.</p>\n</li>\n<li><p>In terminating the connection, after the data transfer completes then the connection must be terminated.</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Authentication</strong> and <strong>Authorization</strong></p>\n<ul>\n<li><p>Authentication: validation of the user ID and password</p>\n</li>\n<li><p>Authorization: whether a user has permission to access a file or not</p>\n</li>\n</ul>\n</li>\n<li><p>An example of a session is a login and a logout</p>\n</li>\n</ul>\n<h3 id=\"heading-transport-layer-layer-4\">Transport Layer (Layer 4)</h3>\n<ol>\n<li><p><strong>Segmentation</strong></p>\n<p> Data is broken into segments to transfer one chunk at a time, i.e., manageable. A general segment has Source IP, Destination IP, and Data (of the segment)</p>\n<p> <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1753379737991/9315c397-9cda-48b3-a44c-70a7aedc9a62.png\" alt class=\"image--right mx-auto mr-0\" /></p>\n</li>\n<li><p><strong>Flow Control</strong></p>\n<p> Managing the flow of data transmitted from one host to another host. The server is sending 10Mbps, but the host is not able to process. So, it requests the server to transmit 1Mbps transfer rate.</p>\n<p> <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1753379781138/0994b75f-c8b2-45db-857d-0b629da3df46.png\" alt class=\"image--center mx-auto\" /></p>\n</li>\n<li><p><strong>Error Control</strong></p>\n<p> There can be a loss of data or data might be corrupted. So, we use error control. These can be fixed in the Transport layer by something called Automatic Repeat Request (in case of loss of data receiver will ask to resend the data) or checksum (checks if the data is corrupted or not).</p>\n<p> <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1753379812987/a2ef54b0-ac45-422e-bc71-7b90190cf799.png\" alt class=\"image--center mx-auto\" /></p>\n</li>\n</ol>\n<h3 id=\"heading-network-layer-layer-3\">Network Layer (Layer 3)</h3>\n<p>The network layer‚Äôs main task is to recognize the network through which the data must be transmitted. It has something called packets. Each packet has a segment, which is received from the above layer and is encapsulated with a header in which we have source and destination addresses. We include the IP address in the TCP packet. Logical Addressing (IP Address).</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1753379857143/6bc2a04e-0205-4111-bbe3-d557f8f378ca.png\" alt class=\"image--center mx-auto\" /></p>\n<p><em>What is an IP address?</em></p>\n<ul>\n<li><p>Range of IP address: 0.0.0.0 to 255.255.255.255</p>\n</li>\n<li><p>It is the address that the network system has uniquely identified. It is a 32-bit or 4-byte address in IPv4, and each byte has an address range of 0-255, called an octet.</p>\n</li>\n<li><p>So, the task of the network layer is to provide the IP address to each host. And it also does Routing.</p>\n</li>\n</ul>\n<p><em>What is Routing?</em></p>\n<p>The task of Routing is to route the packet from the source to the destination.</p>\n<p><em>How do routers do that?</em></p>\n<p>We have destination address it does Masking Masking is a simple bit wise operation. The router sets some bits to 0 and performs a bitwise AND operation, and after masking on the destination IP address, it will get the network IP address.</p>\n<p>Now, with the help of the IP address, it will decide the next router for the packet it has to send.</p>\n<p><strong>DNS</strong> (Domain Name System) is used to connect a hostname like amazon.com to its IP address.</p>\n<h3 id=\"heading-data-link-layer-layer-2\">Data Link Layer (Layer 2)</h3>\n<ul>\n<li><p>The MAC Address is also called a physical address because it contains the address of the physical network device from which the data is going to be transmitted.</p>\n</li>\n<li><p>It is assigned to the network devices, such as NIC (Network Interface Card), Wi-Fi Card, USB Wi-Fi Dongle, etc., by the manufacturer.</p>\n</li>\n<li><p>The packet received from the network layer Data Link Layer encapsulates that with source and destination MAC addresses and creates something called, frame.</p>\n<p>  <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1753380118257/1a2cad6b-0740-489e-8e8f-279727453243.png\" alt class=\"image--center mx-auto\" /></p>\n</li>\n<li><p>But Why MAC Address?</p>\n<p>  The MAC Address helps us to uniquely identify the device. If a packet is received, it helps us to determine which device it belongs to.</p>\n</li>\n</ul>\n<p>Apart from all these Data Link Layer does a few other things, such as</p>\n<ol>\n<li><p><strong>Access to Media:</strong> Media like (Copper wire, Fiber optic cable, Wireless). Since it has access to all these, it can detect Congestion, Error, Collision, etc.</p>\n</li>\n<li><p><strong>Media Access Control</strong></p>\n<p> Media does not mean audio, video. Here, media means the medium through which the data is transferred. DLL helps to control the medium, such as when to transmit the data.</p>\n<ul>\n<li><p>If Multiple hosts are connected to the same router, all the hosts cannot send packets at the same time. MAC ensures avoids collisions.</p>\n<p>  <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1753380218841/ec560a65-f8fb-46ec-8989-7f0fe5060e10.png\" alt class=\"image--center mx-auto\" /></p>\n</li>\n</ul>\n</li>\n<li><p>Error Detection</p>\n<p> It is added in the tail part; It is the mechanism to detect any error in the data. Some algorithms, like CRC (Cyclic redundancy check), Checksum, Bit Parity, etc., help us do that.</p>\n</li>\n</ol>\n<h3 id=\"heading-physical-layer-layer-1\">Physical Layer (Layer 1)</h3>\n<p>The physical layer deals with the encoding of the stream of bits into the signals. These signals are categorized based on the media (or medium).</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1753380281819/eec2782d-45ba-4012-b9b7-95790ecd097a.png\" alt class=\"image--center mx-auto\" /></p>\n<p>The physical layer‚Äôs job is to transmit bits to a signal based on the medium used.</p>\n<h2 id=\"heading-tcp-vs-udp\">TCP vs UDP</h2>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td><strong><em><mark>TCP</mark></em></strong></td><td><strong><em><mark>UDP</mark></em></strong></td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Slow, lossless</td><td>Fast, lossy</td></tr>\n<tr>\n<td>Feedback (whether the packet is received or not)</td><td>No feedback</td></tr>\n<tr>\n<td>Example: Email, Webpage</td><td>Example: Video call</td></tr>\n<tr>\n<td>Connection-oriented</td><td>Connection-less</td></tr>\n</tbody>\n</table>\n</div><h2 id=\"heading-osi-model-vs-tcpip\">OSI Model vs TCP/IP</h2>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1753380443704/f2e78aba-ae9e-4795-bdde-1da89705154c.png\" alt class=\"image--center mx-auto\" /></p>\n","contentMarkdown":"**Imagine waking up in a world without the internet:**\n\n* No way to instantly message your friends or see what‚Äôs trending on social media.\n    \n* No ability to stream music, attend virtual classes, or play online games.\n    \n* No quick access to information, collaboration tools, or even emailing for work or school.\n    \n* Forget about video calls with loved ones across the world\n    \n\n**Well, that's the world without computer networks.**\n\n## Why Learn Computer Networks?\n\nSimple answer: to do all the things we couldn‚Äôt do in a world without them.\n\nWhether it‚Äôs browsing the web, sending messages, working remotely, streaming videos, or making video calls, computer networks are the backbone that make modern life seamless and connected. Every device‚Äîlaptop, desktop, smartphone, smartwatch, or tablet‚Äîis a different form of a computer.\n\nRegardless of your career path‚Äîwhether you're a Software Development Engineer (SDE), Big Data Engineer, Network Engineer, or any other role in tech‚Äî**understanding computer network fundamentals is essential**.\n\nLearning computer networks means understanding the hidden ‚Äúplumbing‚Äù that powers our digital world.\n\n## OSI Model ( Open-Systems-Interconnection )\n\nAlso referred to as a reference model, this model provides a high-level overview of how data is transmitted from one computer to another.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1753359381396/7cb9ec76-e91f-426a-b639-2fde802eec24.png align=\"center\")\n\n* Anything that is a part of the network that wants to communicate is called a ***Host***.\n    \n* ***The server*** is a special type of computer. It is also a Host when receiving data from clients. The server is something that a host receives data from.\n    \n* The OSI Model was finalized between the 1970s and 1980s. And it is a reference model, which means it acts as a reference guide to implement or form the network in the real world.\n    \n* Based on the OSI model, the exact model that is implemented in the real world is the **TCP/IP Model**.\n    \n* The **OSI Model** has **7 different layers**. And each layer has a bunch of protocols that need to be followed to implement a network in the real world.\n    \n* **Protocols** ‚Äî A set of rules that everyone needs to agree upon.\n    \n\n### Philosopher - Translator - Secretary Architecture\n\nOSI model is based on the architecture of philosopher-translator-secretary.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1753378922692/807452aa-2dd3-42cf-b378-fc159bf3f803.png align=\"center\")\n\nIn this architecture, there are two philosophers (A and B) in different locations, and they don‚Äôt speak the same language and want to transmit a message. So, some steps need to be followed by both to successfully send the message.\n\n* Philosopher A gives the message to his secretary, and the secretary will convert the message into a common language that can be understood by the secretary in both locations.\n    \n* Then the converted message will be sent through Fax to Location B. And the secretary in location B will understand the message and pass it to the philosopher in the language the philosopher understands.\n    \n\nSo, this way communication happens in this architecture. So, the same is followed in the OSI Model. Each layer states the different protocols that need to be followed for the successful transmission of the message.\n\nNow, let‚Äôs look at the different layers in the OSI Model\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1753379172076/9217c0fa-ec51-4415-a422-6078b1639133.png align=\"center\")\n\nNow, let‚Äôs briefly look at what each layer is,\n\n### Application Layer (Layer 7)\n\n* Browser ‚Üí HTTPS / FTP (File Transfer Protocol)\n    \n* Outlook ‚Üí SMTP (Simple Mail Transfer Protocol)\n    \n* Skype ‚Üí Skype protocol\n    \n* Remote Desktop ‚Üí Telnet for Unix-based systems), RDP (Remote Desktop Protocol)\n    \n\nThe application layer has a bunch of protocols that are used for various tasks. Outlook uses SMTP for mail transfers and HTTPS to fetch a web page securely.\n\n### Presentation Layer (Layer 6)\n\nThe presentation layer is mostly responsible for\n\n* **Translation**\n    \n    Translates data received from the application layer into the form of ASCII or binary\n    \n    * e.g\n        \n        * Data: Hello o ASCII: 72 101 108 108 111\n            \n        * Binary: 01001000 01100101 01101100 01101100 01101111\n            \n* **Data Compression**\n    \n    Suppose after translation we get 1MB of Data. So, Data Compression tries to reduce the size of the data without much loss because the less the size is the faster transmission can happen over the network.\n    \n* **Encryption**\n    \n    Encrypts the data so that it can‚Äôt be misused. HTTPS uses SSL (Secure Socket Layer), which is a cryptographic protocol designed to provide communications security over a computer network.\n    \n\n### Session Layer (Layer 5)\n\n<div data-node-type=\"callout\">\n<div data-node-type=\"callout-emoji\">üí°</div>\n<div data-node-type=\"callout-text\">These days, most modern browsers manage (Application, Presentation, Session layers)</div>\n</div>\n\n* **Establish**, **manage,** and **terminate** connections.\n    \n    * Establishment of a connection means making a connection in which both server and client have agreed to transfer the data.\n        \n    * Managing connection states, getting knowledge of the connections that were established, and the data transfer can be done effectively.\n        \n    * In terminating the connection, after the data transfer completes then the connection must be terminated.\n        \n* **Authentication** and **Authorization**\n    \n    * Authentication: validation of the user ID and password\n        \n    * Authorization: whether a user has permission to access a file or not\n        \n* An example of a session is a login and a logout\n    \n\n### Transport Layer (Layer 4)\n\n1. **Segmentation**\n    \n    Data is broken into segments to transfer one chunk at a time, i.e., manageable. A general segment has Source IP, Destination IP, and Data (of the segment)\n    \n    ![](https://cdn.hashnode.com/res/hashnode/image/upload/v1753379737991/9315c397-9cda-48b3-a44c-70a7aedc9a62.png align=\"right\")\n    \n2. **Flow Control**\n    \n    Managing the flow of data transmitted from one host to another host. The server is sending 10Mbps, but the host is not able to process. So, it requests the server to transmit 1Mbps transfer rate.\n    \n    ![](https://cdn.hashnode.com/res/hashnode/image/upload/v1753379781138/0994b75f-c8b2-45db-857d-0b629da3df46.png align=\"center\")\n    \n3. **Error Control**\n    \n    There can be a loss of data or data might be corrupted. So, we use error control. These can be fixed in the Transport layer by something called Automatic Repeat Request (in case of loss of data receiver will ask to resend the data) or checksum (checks if the data is corrupted or not).\n    \n    ![](https://cdn.hashnode.com/res/hashnode/image/upload/v1753379812987/a2ef54b0-ac45-422e-bc71-7b90190cf799.png align=\"center\")\n    \n\n### Network Layer (Layer 3)\n\nThe network layer‚Äôs main task is to recognize the network through which the data must be transmitted. It has something called packets. Each packet has a segment, which is received from the above layer and is encapsulated with a header in which we have source and destination addresses. We include the IP address in the TCP packet. Logical Addressing (IP Address).\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1753379857143/6bc2a04e-0205-4111-bbe3-d557f8f378ca.png align=\"center\")\n\n*What is an IP address?*\n\n* Range of IP address: 0.0.0.0 to 255.255.255.255\n    \n* It is the address that the network system has uniquely identified. It is a 32-bit or 4-byte address in IPv4, and each byte has an address range of 0-255, called an octet.\n    \n* So, the task of the network layer is to provide the IP address to each host. And it also does Routing.\n    \n\n*What is Routing?*\n\nThe task of Routing is to route the packet from the source to the destination.\n\n*How do routers do that?*\n\nWe have destination address it does Masking Masking is a simple bit wise operation. The router sets some bits to 0 and performs a bitwise AND operation, and after masking on the destination IP address, it will get the network IP address.\n\nNow, with the help of the IP address, it will decide the next router for the packet it has to send.\n\n**DNS** (Domain Name System) is used to connect a hostname like amazon.com to its IP address.\n\n### Data Link Layer (Layer 2)\n\n* The MAC Address is also called a physical address because it contains the address of the physical network device from which the data is going to be transmitted.\n    \n* It is assigned to the network devices, such as NIC (Network Interface Card), Wi-Fi Card, USB Wi-Fi Dongle, etc., by the manufacturer.\n    \n* The packet received from the network layer Data Link Layer encapsulates that with source and destination MAC addresses and creates something called, frame.\n    \n    ![](https://cdn.hashnode.com/res/hashnode/image/upload/v1753380118257/1a2cad6b-0740-489e-8e8f-279727453243.png align=\"center\")\n    \n* But Why MAC Address?\n    \n    The MAC Address helps us to uniquely identify the device. If a packet is received, it helps us to determine which device it belongs to.\n    \n\nApart from all these Data Link Layer does a few other things, such as\n\n1. **Access to Media:** Media like (Copper wire, Fiber optic cable, Wireless). Since it has access to all these, it can detect Congestion, Error, Collision, etc.\n    \n2. **Media Access Control**\n    \n    Media does not mean audio, video. Here, media means the medium through which the data is transferred. DLL helps to control the medium, such as when to transmit the data.\n    \n    * If Multiple hosts are connected to the same router, all the hosts cannot send packets at the same time. MAC ensures avoids collisions.\n        \n        ![](https://cdn.hashnode.com/res/hashnode/image/upload/v1753380218841/ec560a65-f8fb-46ec-8989-7f0fe5060e10.png align=\"center\")\n        \n3. Error Detection\n    \n    It is added in the tail part; It is the mechanism to detect any error in the data. Some algorithms, like CRC (Cyclic redundancy check), Checksum, Bit Parity, etc., help us do that.\n    \n\n### Physical Layer (Layer 1)\n\nThe physical layer deals with the encoding of the stream of bits into the signals. These signals are categorized based on the media (or medium).\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1753380281819/eec2782d-45ba-4012-b9b7-95790ecd097a.png align=\"center\")\n\nThe physical layer‚Äôs job is to transmit bits to a signal based on the medium used.\n\n## TCP vs UDP\n\n| ***<mark>TCP</mark>*** | ***<mark>UDP</mark>*** |\n| --- | --- |\n| Slow, lossless | Fast, lossy |\n| Feedback (whether the packet is received or not) | No feedback |\n| Example: Email, Webpage | Example: Video call |\n| Connection-oriented | Connection-less |\n\n## OSI Model vs TCP/IP\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1753380443704/f2e78aba-ae9e-4795-bdde-1da89705154c.png align=\"center\")","coverImage":"https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/M5tzZtFCOfs/upload/b3ea93678ca09b98a3324599bf79993e.jpeg","brief":"Imagine waking up in a world without the internet:\n\nNo way to instantly message your friends or see what‚Äôs trending on social media.\n\nNo ability to stream music, attend virtual classes, or play online games.\n\nNo quick access to information, collabora...","author":"6633c2252c01edc0085a6004","sB":false,"isRepublished":false,"readTime":7,"draft":"674482737261fd5c732cf323","tags":[],"publication":"666f1cf14b217c47fabb0339","metaTitle":"Computer Networks: Essential Concepts & Basics","metaDescription":"Learn the essential concepts of computer networks, the OSI model, and the critical layers that enable our connected digital world","isNewsletterActivated":true,"coAuthors":[],"dateUpdated":"2025-07-24T18:26:31.231Z","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"68827909ec1bda8f3467e3fc"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"_id":"67447cf73a43f4551290f99c","createdAt":"2024-11-25T13:34:47.685Z","updatedAt":"2024-11-25T13:34:47.685Z","views":27,"isActive":true,"hasLatex":true,"popularity":7189.5664,"discussionScore":0,"enableToc":true,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Selection Sort Algorithm in Javascript","cuid":"cm3x2l5z8000109joai1513xd","dateAdded":"2024-11-25T13:34:47.685Z","isCoverAttributionHidden":false,"coverImageAttribution":"https://unsplash.com/@chrislawton","coverImagePhotographer":"Chris Lawton","stickCoverToBottom":false,"slug":"selection-sort-algorithm-in-javascript","toc":[[{"id":"d976723f-a67b-4243-b8cf-4dc791fe8420","level":3,"previousLevel":null,"parentId":null,"slug":"overview","title":"Overview"}],[{"id":"b25b120a-3800-417f-8da7-68f824af21e4","level":3,"previousLevel":3,"parentId":null,"slug":"idea","title":"Idea"}],[{"id":"2554b783-a4cf-4d4e-b380-08394b8e138e","level":3,"previousLevel":3,"parentId":null,"slug":"code","title":"Code"}],[{"id":"ca761e05-70e6-435d-bb96-5891c720e8c1","level":3,"previousLevel":3,"parentId":null,"slug":"time-complexity","title":"Time Complexity"}]],"content":"<h3 id=\"heading-overview\">Overview</h3>\n<ul>\n<li><p>O(n¬≤) Time Complexity in all cases.</p>\n</li>\n<li><p>Does less <em>‚ÄúMemory writes‚Äù</em> when compared with other algorithms such as Quick sort, Merge sort, Insertion sort and Bubble sort.</p>\n</li>\n<li><p>However, not an optimal algorithm in terms of ‚ÄúMemory writes‚Äù. There is other algorithm called Cycle sort which is optimal in terms of memory writes.</p>\n</li>\n<li><p>Basic idea for Heap sort.</p>\n</li>\n<li><p>Not Stable (order of elements may change).</p>\n</li>\n<li><p>In-Place Algorithm</p>\n</li>\n</ul>\n<h3 id=\"heading-idea\">Idea</h3>\n<ul>\n<li><p>Iterate through loop</p>\n</li>\n<li><p>First iteration, find the minimum element and put it in the first place.</p>\n</li>\n<li><p>Second iteration, find the minimum element and put it in the second place.</p>\n</li>\n<li><p>Repeat this process, at the end the array is sorted.</p>\n</li>\n</ul>\n<h3 id=\"heading-code\">Code</h3>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://codepen.io/mohs-in/pen/azooEmp\">https://codepen.io/mohs-in/pen/azooEmp</a></div>\n<p> </p>\n<h3 id=\"heading-time-complexity\">Time Complexity</h3>\n<p>The internal for-loop runs:</p>\n<p>$$\\begin{align*} (n-1) + (n-2) + \\dots + 2 + 1 \\\\ = \\frac{n(n-1)}{2} \\\\ \\theta(n^2) \\end{align*}$$</p>","contentMarkdown":"### Overview\n\n* O(n¬≤) Time Complexity in all cases.\n    \n* Does less *‚ÄúMemory writes‚Äù* when compared with other algorithms such as Quick sort, Merge sort, Insertion sort and Bubble sort.\n    \n* However, not an optimal algorithm in terms of ‚ÄúMemory writes‚Äù. There is other algorithm called Cycle sort which is optimal in terms of memory writes.\n    \n* Basic idea for Heap sort.\n    \n* Not Stable (order of elements may change).\n    \n* In-Place Algorithm\n    \n\n### Idea\n\n* Iterate through loop\n    \n* First iteration, find the minimum element and put it in the first place.\n    \n* Second iteration, find the minimum element and put it in the second place.\n    \n* Repeat this process, at the end the array is sorted.\n    \n\n### Code\n\n%[https://codepen.io/mohs-in/pen/azooEmp] \n\n### Time Complexity\n\nThe internal for-loop runs:\n\n$$\\begin{align*} (n-1) + (n-2) + \\dots + 2 + 1 \\\\ = \\frac{n(n-1)}{2} \\\\ \\theta(n^2) \\end{align*}$$","coverImage":"https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/zvKx6ixUhWQ/upload/55b9f944391b69a1e323b9329815e3de.jpeg","brief":"Overview\n\nO(n¬≤) Time Complexity in all cases.\n\nDoes less ‚ÄúMemory writes‚Äù when compared with other algorithms such as Quick sort, Merge sort, Insertion sort and Bubble sort.\n\nHowever, not an optimal algorithm in terms of ‚ÄúMemory writes‚Äù. There is othe...","author":"6633c2252c01edc0085a6004","sB":false,"isRepublished":false,"readTime":1,"draft":"66e59c0c0b0390e616afe9a3","tags":["67447cf71b8c712f13ec6158","67447cf71b8c712f13ec615a","630b69e943d7308e3e323692"],"publication":"666f1cf14b217c47fabb0339","metaTitle":"JavaScript Selection Sort Explained","metaDescription":"Learn how to implement the Selection Sort algorithm in JavaScript efficiently with code examples and detailed explanations","isNewsletterActivated":false,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"67447cf73a43f4551290f99c"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"_id":"66e53ce0535913cdf2a33314","createdAt":"2024-09-14T07:36:00.314Z","updatedAt":"2024-09-14T07:36:00.314Z","views":24,"isActive":true,"hasLatex":false,"popularity":7050.848,"discussionScore":0,"enableToc":true,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"What You Need to Know About Cloud Computing","subtitle":"Understanding the Basics and Benefits of Cloud Computing","cuid":"cm11u2fcq001b08l3hlci0hrc","dateAdded":"2024-09-14T07:36:00.314Z","isCoverAttributionHidden":true,"coverImageAttribution":"https://unsplash.com/@growtika","coverImagePhotographer":"Growtika","stickCoverToBottom":false,"slug":"what-you-need-to-know-about-cloud-computing","toc":[[{"id":"749a804b-ae72-435a-919b-5acf356ff485","level":1,"previousLevel":null,"parentId":null,"slug":"traditional-it-overview","title":"Traditional IT Overview"}],[{"id":"680721b7-34b3-411b-8ca2-4f58f37a4b24","level":2,"previousLevel":1,"parentId":"749a804b-ae72-435a-919b-5acf356ff485","slug":"it-terminology","title":"IT Terminology"}],[{"id":"627c3ecf-8f1e-4d86-8aaf-f87d4404e9c1","level":3,"previousLevel":2,"parentId":"680721b7-34b3-411b-8ca2-4f58f37a4b24","slug":"network","title":"Network"}],[{"id":"333ce852-b1e5-474e-86c8-589e321eb76a","level":3,"previousLevel":3,"parentId":"680721b7-34b3-411b-8ca2-4f58f37a4b24","slug":"router","title":"Router"}],[{"id":"f01d4da9-e034-4a29-87aa-f851f4ff1f74","level":3,"previousLevel":3,"parentId":"680721b7-34b3-411b-8ca2-4f58f37a4b24","slug":"switch","title":"Switch"}],[{"id":"54bd6f80-588d-4e7e-b3e0-6723f78d30a4","level":2,"previousLevel":3,"parentId":"749a804b-ae72-435a-919b-5acf356ff485","slug":"problems-with-traditional-it-approach","title":"Problems with traditional IT approach"}],[{"id":"c50460ba-7e26-4326-99a5-2bf98f28e0fd","level":1,"previousLevel":2,"parentId":null,"slug":"what-is-cloud-computing","title":"What is Cloud Computing?"}],[{"id":"f2329bdd-92f6-4975-9047-847971adf066","level":2,"previousLevel":1,"parentId":"c50460ba-7e26-4326-99a5-2bf98f28e0fd","slug":"the-deployment-models-of-the-cloud","title":"The Deployment Models of the Cloud"}],[{"id":"5c429c59-43b0-4582-9f19-bcb49b9f9e74","level":2,"previousLevel":2,"parentId":"c50460ba-7e26-4326-99a5-2bf98f28e0fd","slug":"the-five-characteristics-of-cloud-computing","title":"The Five Characteristics of Cloud Computing"}],[{"id":"65447eb8-bedc-4b70-b45b-1ddac8941f20","level":2,"previousLevel":2,"parentId":"c50460ba-7e26-4326-99a5-2bf98f28e0fd","slug":"six-advantages-of-cloud-computing","title":"Six Advantages of Cloud Computing"}],[{"id":"26897b17-8fcd-4816-99de-f38ce6e3679b","level":2,"previousLevel":2,"parentId":"c50460ba-7e26-4326-99a5-2bf98f28e0fd","slug":"problems-solved-by-the-cloud","title":"Problems solved by the Cloud"}],[{"id":"063095dc-f7bf-4f77-9d19-d12f70b6a9df","level":1,"previousLevel":2,"parentId":null,"slug":"types-of-cloud-computing","title":"Types of Cloud Computing"}],[{"id":"ba5afe8a-2df3-41c5-a420-44e618e1113d","level":2,"previousLevel":1,"parentId":"063095dc-f7bf-4f77-9d19-d12f70b6a9df","slug":"infrastructure-as-a-serviceiaas","title":"Infrastructure as a Service(IaaS)"}],[{"id":"97862ca3-39ed-4b47-94cc-f41119cb8759","level":2,"previousLevel":2,"parentId":"063095dc-f7bf-4f77-9d19-d12f70b6a9df","slug":"platform-as-a-servicepaas","title":"Platform as a Service(PaaS)"}],[{"id":"d661c7f6-e7d5-4789-998c-7b2527eb4f90","level":2,"previousLevel":2,"parentId":"063095dc-f7bf-4f77-9d19-d12f70b6a9df","slug":"software-as-a-servicesaas","title":"Software as a Service(SaaS)"}],[{"id":"b948dad6-66f6-4a32-91a6-23b7f56f21f9","level":2,"previousLevel":2,"parentId":"063095dc-f7bf-4f77-9d19-d12f70b6a9df","slug":"on-premises-vs-iaas-vs-paas-vs-saas","title":"On-premises vs Iaas vs Paas vs Saas"}],[{"id":"78614b1c-0d5e-4aea-8ff8-83c72f7ccbad","level":1,"previousLevel":2,"parentId":null,"slug":"aws-cloud-overview","title":"AWS Cloud Overview"}],[{"id":"88888647-17ba-4dbd-91f6-651c15ce0102","level":2,"previousLevel":1,"parentId":"78614b1c-0d5e-4aea-8ff8-83c72f7ccbad","slug":"aws-regions","title":"AWS Regions"}],[{"id":"880d9a6d-849a-48d7-b64d-a42fc8b48662","level":2,"previousLevel":2,"parentId":"78614b1c-0d5e-4aea-8ff8-83c72f7ccbad","slug":"how-to-choose-an-aws-region","title":"How to choose an AWS Region?"}],[{"id":"15396e1f-0c80-4b46-afb5-68dedced9fa0","level":2,"previousLevel":2,"parentId":"78614b1c-0d5e-4aea-8ff8-83c72f7ccbad","slug":"aws-availability-zones","title":"AWS Availability Zones"}],[{"id":"bce63c57-8e91-4050-a8c5-233e20a2d18c","level":2,"previousLevel":2,"parentId":"78614b1c-0d5e-4aea-8ff8-83c72f7ccbad","slug":"aws-points-of-presence-edge-locations","title":"AWS Points of Presence (Edge Locations)"}]],"content":"<hr />\n<h1 id=\"heading-traditional-it-overview\">Traditional IT Overview</h1>\n<h2 id=\"heading-it-terminology\">IT Terminology</h2>\n<h3 id=\"heading-network\">Network</h3>\n<p>Cables, routers and servers connected with each other.</p>\n<h3 id=\"heading-router\">Router</h3>\n<p>A networking device that forwards data packets between computer networks. They know where to send your packets on the internet.</p>\n<h3 id=\"heading-switch\">Switch</h3>\n<p>Takes a packet and send it to the correct server / client on your network.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1726298298675/ce7932c9-10bc-4937-ab14-185490d9ab99.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-problems-with-traditional-it-approach\">Problems with traditional IT approach</h2>\n<ul>\n<li><p>Pay for the rent for the data centre</p>\n</li>\n<li><p>Pay for power supply, cooling, maintenance</p>\n</li>\n<li><p>Adding and replacing hardware takes time</p>\n</li>\n<li><p>Scaling is limited</p>\n</li>\n<li><p>Hire 24/7 team to monitor the infrastructure</p>\n</li>\n<li><p>How to deal with disasters (earthquake, power shutdown, fire, ‚Ä¶)</p>\n</li>\n</ul>\n<hr />\n<h1 id=\"heading-what-is-cloud-computing\">What is Cloud Computing?</h1>\n<ul>\n<li><p>Cloud computing is the <strong>on-demand delivery</strong> of <em>compute power</em>, <em>database storage</em>, <em>applications</em>, and other IT resources</p>\n</li>\n<li><p>Through a cloud services platform with <strong>pay-as-you-go pricing</strong></p>\n</li>\n<li><p>You can provision exactly the right type and size of computing resources you need</p>\n</li>\n<li><p>You can access as many resources as you need, almost instantly</p>\n</li>\n<li><p>Simple way to access servers, storage, databases and a set of application services</p>\n</li>\n<li><p>Amazon Web Services owns and maintain the network-connected hardware required for these application services, while you provision and use what you need via a web application</p>\n</li>\n</ul>\n<h2 id=\"heading-the-deployment-models-of-the-cloud\">The Deployment Models of the Cloud</h2>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>Private Cloud</td><td>Public Cloud</td><td>Hybrid Cloud</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Cloud services used by a single organisation, not exposed to the public</td><td>Cloud resources owned and operated by a third-party cloud service provider delivered over the Internet</td><td>Keep some servers on premises and extend some capabilities to the Cloud</td></tr>\n<tr>\n<td>Complete control &amp; Security for sensitive applications</td><td>Six advantages of Cloud Computing</td><td>Control over sensitive assets in your private infrastructure</td></tr>\n<tr>\n<td>Meet specific business needs</td><td></td><td>Flexibility and cost-effectiveness of the public cloud</td></tr>\n<tr>\n<td>Ex: Rackspace</td><td>Ex: Azure, GCP, AWS</td><td>Ex: On-premises ‚Üî AWS</td></tr>\n</tbody>\n</table>\n</div><h2 id=\"heading-the-five-characteristics-of-cloud-computing\">The Five Characteristics of Cloud Computing</h2>\n<ol>\n<li><p><strong><em>On-demand self service:</em></strong></p>\n<p> Users can provision resources and use them without human interaction from the service provider</p>\n</li>\n<li><p><strong><em>Broad network access:</em></strong></p>\n<p> Resources available over the network, and can be accessed by diverse client platforms</p>\n</li>\n<li><p><strong><em>Multi-tenancy and resource pooling:</em></strong></p>\n<ul>\n<li><p>Multiple customers can share the same infrastructure and applications with security and privacy</p>\n</li>\n<li><p>Multiple customers are serviced from the same physical resources</p>\n</li>\n</ul>\n</li>\n<li><p><strong><em>Rapid elasticity and scalability:</em></strong></p>\n<ul>\n<li><p>Automatically and quickly acquire and dispose resources when needed</p>\n</li>\n<li><p>Quickly and easily scale based on demand</p>\n</li>\n</ul>\n</li>\n<li><p><strong><em>Measured service:</em></strong></p>\n<p> Usage is measured, users pay correctly for what they have used</p>\n</li>\n</ol>\n<h2 id=\"heading-six-advantages-of-cloud-computing\">Six Advantages of Cloud Computing</h2>\n<ol>\n<li><p>Trade capital expense (CAPEX) for operational expense (OPEX)</p>\n<ul>\n<li><p><strong><em>Pay On-Demand:</em></strong> don‚Äôt own hardware</p>\n</li>\n<li><p>Reduced <strong><em>Total Cost of Ownership (TCO)</em></strong> &amp; <strong><em>Operational Expense</em></strong> (OPEX)</p>\n</li>\n</ul>\n</li>\n<li><p>Benefit from massive economies of scale</p>\n<p> Prices are reduced as AWS is more efficient due to large scale</p>\n</li>\n<li><p>Stop guessing capacity</p>\n<p> Scale based on actual measured usage</p>\n</li>\n<li><p>Increase speed and agility</p>\n</li>\n<li><p>Stop spending money running and maintaining data centres</p>\n</li>\n<li><p>Go global in minutes: leverage the AWS global infrastructure</p>\n</li>\n</ol>\n<h2 id=\"heading-problems-solved-by-the-cloud\">Problems solved by the Cloud</h2>\n<ul>\n<li><p><strong>Flexibility:</strong> change resource types when needed</p>\n</li>\n<li><p><strong>Cost-Effectiveness:</strong> pay as you go, for what you use</p>\n</li>\n<li><p><strong>Scalability:</strong> accommodate larger loads by making hardware stronger or adding additional nodes</p>\n</li>\n<li><p><strong>Elasticity:</strong> ability to scale out and scale-in when needed</p>\n</li>\n<li><p><strong>High-availability and fault-tolerance:</strong> build across data centres</p>\n</li>\n<li><p><strong>Agility:</strong> rapidly develop, test and launch software applications</p>\n</li>\n</ul>\n<hr />\n<h1 id=\"heading-types-of-cloud-computing\">Types of Cloud Computing</h1>\n<h2 id=\"heading-infrastructure-as-a-serviceiaas\">Infrastructure as a Service(IaaS)</h2>\n<ul>\n<li><p>Provide building blocks for cloud IT</p>\n</li>\n<li><p>Provides networking, computers, data storage space</p>\n</li>\n<li><p>Highest level of flexibility</p>\n</li>\n<li><p>Easy parallel with traditional on-premises IT</p>\n</li>\n</ul>\n<blockquote>\n<p>Ex: Amazon EC2(AWS), GCP, Azure, Rackspace, Digital Ocean, Linode</p>\n</blockquote>\n<h2 id=\"heading-platform-as-a-servicepaas\">Platform as a Service(PaaS)</h2>\n<ul>\n<li><p>Removes the need for your organizationo to manage the underlying infrastructure</p>\n</li>\n<li><p>Focus on the deployment and management of your applications</p>\n</li>\n</ul>\n<blockquote>\n<p>Elastic Beanstalk(AWS), Heroku, Google App Engine(GCP), Windows Azure(Microsoft)</p>\n</blockquote>\n<h2 id=\"heading-software-as-a-servicesaas\">Software as a Service(SaaS)</h2>\n<ul>\n<li>Completed product that is run and managed by the service provider</li>\n</ul>\n<h2 id=\"heading-on-premises-vs-iaas-vs-paas-vs-saas\">On-premises vs Iaas vs Paas vs Saas</h2>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1726298893269/ba8776c5-c672-423e-9ef5-837457680d54.png\" alt class=\"image--center mx-auto\" /></p>\n<hr />\n<h1 id=\"heading-aws-cloud-overview\">AWS Cloud Overview</h1>\n<h2 id=\"heading-aws-regions\">AWS Regions</h2>\n<ul>\n<li><p>AWS has Regions all around the world</p>\n</li>\n<li><p>Names can be us-east-I, eu-west-3, ‚Ä¶</p>\n</li>\n<li><p>A region is a cluster of data centers</p>\n</li>\n<li><p>Most AWS services are region-scoped</p>\n</li>\n</ul>\n<h2 id=\"heading-how-to-choose-an-aws-region\">How to choose an AWS Region?</h2>\n<ul>\n<li><p><strong><em>Compliance</em></strong> <strong>with data governance and legal requirements:</strong> data never leaves a region without your explicit permission</p>\n</li>\n<li><p><strong><em>Proximity</em> to customers:</strong> reduced latency</p>\n</li>\n<li><p><strong><em>Available services</em> within a Region:</strong> new services and new features aren‚Äôt available in every Region</p>\n</li>\n<li><p><strong><em>Pricing</em>:</strong> pricing varies region to region and is transparent in the service pricing page</p>\n</li>\n</ul>\n<h2 id=\"heading-aws-availability-zones\">AWS Availability Zones</h2>\n<ul>\n<li><p>Each region has many availability zones. (usually3, min is 3, max is 6). Example:</p>\n<ul>\n<li><p>ap-southeast-2a</p>\n</li>\n<li><p>ap-southeast-2b</p>\n</li>\n<li><p>ap-southeast-2c</p>\n</li>\n</ul>\n</li>\n<li><p>Each availablity zone (AZ) is one or more discrete data centers with redundant power, networking, and connectivity</p>\n</li>\n<li><p>They‚Äôre separate from each other, so that they‚Äôre isolated from disasters</p>\n</li>\n<li><p>They‚Äôre connected with high bandwidth, ultra-low latency networking</p>\n</li>\n</ul>\n<h2 id=\"heading-aws-points-of-presence-edge-locations\">AWS Points of Presence (Edge Locations)</h2>\n<ul>\n<li><p>Amazon has 400+ Points of Presence (400+ Edge Locations &amp; 10+ Regional Caches) in 90+cities across 40+ countries</p>\n</li>\n<li><p>Content is delivered to end users with lower latency</p>\n</li>\n</ul>\n<hr />\n","contentMarkdown":"---\n\n# Traditional IT Overview\n\n## IT Terminology\n\n### Network\n\nCables, routers and servers connected with each other.\n\n### Router\n\nA networking device that forwards data packets between computer networks. They know where to send your packets on the internet.\n\n### Switch\n\nTakes a packet and send it to the correct server / client on your network.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1726298298675/ce7932c9-10bc-4937-ab14-185490d9ab99.png align=\"center\")\n\n## Problems with traditional IT approach\n\n* Pay for the rent for the data centre\n    \n* Pay for power supply, cooling, maintenance\n    \n* Adding and replacing hardware takes time\n    \n* Scaling is limited\n    \n* Hire 24/7 team to monitor the infrastructure\n    \n* How to deal with disasters (earthquake, power shutdown, fire, ‚Ä¶)\n    \n\n---\n\n# What is Cloud Computing?\n\n* Cloud computing is the **on-demand delivery** of *compute power*, *database storage*, *applications*, and other IT resources\n    \n* Through a cloud services platform with **pay-as-you-go pricing**\n    \n* You can provision exactly the right type and size of computing resources you need\n    \n* You can access as many resources as you need, almost instantly\n    \n* Simple way to access servers, storage, databases and a set of application services\n    \n* Amazon Web Services owns and maintain the network-connected hardware required for these application services, while you provision and use what you need via a web application\n    \n\n## The Deployment Models of the Cloud\n\n| Private Cloud | Public Cloud | Hybrid Cloud |\n| --- | --- | --- |\n| Cloud services used by a single organisation, not exposed to the public | Cloud resources owned and operated by a third-party cloud service provider delivered over the Internet | Keep some servers on premises and extend some capabilities to the Cloud |\n| Complete control & Security for sensitive applications | Six advantages of Cloud Computing | Control over sensitive assets in your private infrastructure |\n| Meet specific business needs |  | Flexibility and cost-effectiveness of the public cloud |\n| Ex: Rackspace | Ex: Azure, GCP, AWS | Ex: On-premises ‚Üî AWS |\n\n## The Five Characteristics of Cloud Computing\n\n1. ***On-demand self service:***\n    \n    Users can provision resources and use them without human interaction from the service provider\n    \n2. ***Broad network access:***\n    \n    Resources available over the network, and can be accessed by diverse client platforms\n    \n3. ***Multi-tenancy and resource pooling:***\n    \n    * Multiple customers can share the same infrastructure and applications with security and privacy\n        \n    * Multiple customers are serviced from the same physical resources\n        \n4. ***Rapid elasticity and scalability:***\n    \n    * Automatically and quickly acquire and dispose resources when needed\n        \n    * Quickly and easily scale based on demand\n        \n5. ***Measured service:***\n    \n    Usage is measured, users pay correctly for what they have used\n    \n\n## Six Advantages of Cloud Computing\n\n1. Trade capital expense (CAPEX) for operational expense (OPEX)\n    \n    * ***Pay On-Demand:*** don‚Äôt own hardware\n        \n    * Reduced ***Total Cost of Ownership (TCO)*** & ***Operational Expense*** (OPEX)\n        \n2. Benefit from massive economies of scale\n    \n    Prices are reduced as AWS is more efficient due to large scale\n    \n3. Stop guessing capacity\n    \n    Scale based on actual measured usage\n    \n4. Increase speed and agility\n    \n5. Stop spending money running and maintaining data centres\n    \n6. Go global in minutes: leverage the AWS global infrastructure\n    \n\n## Problems solved by the Cloud\n\n* **Flexibility:** change resource types when needed\n    \n* **Cost-Effectiveness:** pay as you go, for what you use\n    \n* **Scalability:** accommodate larger loads by making hardware stronger or adding additional nodes\n    \n* **Elasticity:** ability to scale out and scale-in when needed\n    \n* **High-availability and fault-tolerance:** build across data centres\n    \n* **Agility:** rapidly develop, test and launch software applications\n    \n\n---\n\n# Types of Cloud Computing\n\n## Infrastructure as a Service(IaaS)\n\n* Provide building blocks for cloud IT\n    \n* Provides networking, computers, data storage space\n    \n* Highest level of flexibility\n    \n* Easy parallel with traditional on-premises IT\n    \n\n> Ex: Amazon EC2(AWS), GCP, Azure, Rackspace, Digital Ocean, Linode\n\n## Platform as a Service(PaaS)\n\n* Removes the need for your organizationo to manage the underlying infrastructure\n    \n* Focus on the deployment and management of your applications\n    \n\n> Elastic Beanstalk(AWS), Heroku, Google App Engine(GCP), Windows Azure(Microsoft)\n\n## Software as a Service(SaaS)\n\n* Completed product that is run and managed by the service provider\n    \n\n## On-premises vs Iaas vs Paas vs Saas\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1726298893269/ba8776c5-c672-423e-9ef5-837457680d54.png align=\"center\")\n\n---\n\n# AWS Cloud Overview\n\n## AWS Regions\n\n* AWS has Regions all around the world\n    \n* Names can be us-east-I, eu-west-3, ‚Ä¶\n    \n* A region is a cluster of data centers\n    \n* Most AWS services are region-scoped\n    \n\n## How to choose an AWS Region?\n\n* ***Compliance*** **with data governance and legal requirements:** data never leaves a region without your explicit permission\n    \n* ***Proximity* to customers:** reduced latency\n    \n* ***Available services* within a Region:** new services and new features aren‚Äôt available in every Region\n    \n* ***Pricing*:** pricing varies region to region and is transparent in the service pricing page\n    \n\n## AWS Availability Zones\n\n* Each region has many availability zones. (usually3, min is 3, max is 6). Example:\n    \n    * ap-southeast-2a\n        \n    * ap-southeast-2b\n        \n    * ap-southeast-2c\n        \n* Each availablity zone (AZ) is one or more discrete data centers with redundant power, networking, and connectivity\n    \n* They‚Äôre separate from each other, so that they‚Äôre isolated from disasters\n    \n* They‚Äôre connected with high bandwidth, ultra-low latency networking\n    \n\n## AWS Points of Presence (Edge Locations)\n\n* Amazon has 400+ Points of Presence (400+ Edge Locations & 10+ Regional Caches) in 90+cities across 40+ countries\n    \n* Content is delivered to end users with lower latency\n    \n\n---","coverImage":"https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/TKAg3WignSw/upload/f6b1d19866ac94c5ef7c968344fad415.jpeg","brief":"Traditional IT Overview\nIT Terminology\nNetwork\nCables, routers and servers connected with each other.\nRouter\nA networking device that forwards data packets between computer networks. They know where to send your packets on the internet.\nSwitch\nTakes ...","author":"6633c2252c01edc0085a6004","sB":false,"isRepublished":false,"readTime":4,"draft":"66ba5e4a9a25ef8869644a9f","tags":["66e53cdf45fa3f0046c48233","56744723958ef13879b9533a","654750f515caa6554c814e3f","63c4e2d309eddfeb668b12c3","56744721958ef13879b94bc5","62f67735fffdab933bde4f84","62f9f007fffdab933bdebdd9"],"publication":"666f1cf14b217c47fabb0339","metaTitle":"Cloud Computing: Essential Information","metaDescription":"Learn about the essentials of cloud computing, its advantages, and deployment models. Discover AWS services, regions, and availability zones","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"66e53ce0535913cdf2a33314"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"_id":"6680414c46abbd804aa29d91","createdAt":"2024-06-29T17:15:56.469Z","updatedAt":"2025-07-24T18:26:31.252Z","views":65,"isActive":true,"hasLatex":false,"popularity":6903.7812,"discussionScore":0,"enableToc":true,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Key React Hooks Explained: useState, useEffect, and useContext","cuid":"cly0dvmwj000409l5gveg7n0j","dateAdded":"2024-06-29T17:15:56.467Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"key-react-hooks-explained","toc":[[{"id":"416900c3-fc07-4feb-b15f-592745f02b1c","level":1,"previousLevel":null,"parentId":null,"slug":"usestate","title":"useState()"}],[{"id":"064f887f-1342-4896-b630-2c77c8ae0835","level":3,"previousLevel":1,"parentId":"416900c3-fc07-4feb-b15f-592745f02b1c","slug":"how-to-use-it","title":"How to use it?"}],[{"id":"55dad074-cb7c-49ef-a2a8-79985774f4eb","level":1,"previousLevel":3,"parentId":null,"slug":"useeffect","title":"useEffect()"}],[{"id":"c93978c3-fba6-43e8-bcba-34da72a72f1c","level":3,"previousLevel":1,"parentId":"55dad074-cb7c-49ef-a2a8-79985774f4eb","slug":"how-to-use-it-1","title":"How to use it?"}],[{"id":"f0e2345d-2ff6-4ed9-a2a6-07614f333f1b","level":1,"previousLevel":3,"parentId":null,"slug":"usecontext","title":"useContext()"}],[{"id":"c6356491-af32-489a-976f-e05f31900d6d","level":3,"previousLevel":1,"parentId":"f0e2345d-2ff6-4ed9-a2a6-07614f333f1b","slug":"the-problem","title":"The Problem"}],[{"id":"774f7f1c-40cc-49e1-80b9-9b282ae591ce","level":3,"previousLevel":3,"parentId":"f0e2345d-2ff6-4ed9-a2a6-07614f333f1b","slug":"how-to-use-it-2","title":"How to use it?"}]],"content":"<h1 id=\"heading-usestate\"><code>useState()</code></h1>\n<p>The purpose of <code>useState</code> is to handle reactive data. Any <mark>data that changes in the application is called state</mark>. When the state changes you want react to update the UI, so the latest changes are reflected to the end user.</p>\n<h3 id=\"heading-how-to-use-it\">How to use it?</h3>\n<pre><code class=\"lang-jsx\"><span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>)\n</code></pre>\n<blockquote>\n<p><code>useState()</code> returns an array with 2 values:</p>\n<ol>\n<li><p>Current state</p>\n<p> In our example, count is the state variable which is set to 0. This initial state can be a number, boolean, string, or object</p>\n</li>\n<li><p>Set function to update the state.</p>\n<p> You can update the state in two ways:</p>\n<p> i. Directly passing the next state <code>setCount(2)</code> // Now, the updated state of</p>\n<p> count will be 2.</p>\n<p> ii. Using function <code>setCount( prevCount =&gt; prevCount + 1)</code> In this function, we check the current state which is 2. The value of <code>prevCount</code> will be 2, then</p>\n<p> we increment it by 1.</p>\n</li>\n</ol>\n</blockquote>\n<p><strong>Docs:</strong><a target=\"_blank\" href=\"https://react.dev/reference/react/useState#usage\">https://react.dev/reference/react/useState#usage</a></p>\n<h1 id=\"heading-useeffect\"><code>useEffect()</code></h1>\n<p><code>useEffect</code> is a Hook in React that allows you to <mark>synchronise a component with an external system</mark>. It is a way to handle side effects, such as fetching data or subscribing to a event in a functional component.</p>\n<h3 id=\"heading-how-to-use-it-1\">How to use it?</h3>\n<pre><code class=\"lang-jsx\">useEffect(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'count changed'</span>)\n},[count])\n</code></pre>\n<p>Here, the `count changed ` will be logged every time the count changes.</p>\n<blockquote>\n<p><code>useEffect</code> takes two arguments:</p>\n<ol>\n<li><p>A callback function</p>\n<p> The callback function is called after the component has rendered.</p>\n</li>\n<li><p>A list of dependencies</p>\n<p> The list of dependencies is used to determine when to re-run the effect, by comparing the current values of the dependencies to the previous values.</p>\n</li>\n</ol>\n</blockquote>\n<p>In the callback function, you can perform any side effects, such as fetching data or subscribing to an event. You can also return a cleanup function, which is called before the component is unmounted or the effect is re-run.</p>\n<blockquote>\n<p>Note:</p>\n<ol>\n<li><p>If you don‚Äôt pass dependencies the effect will re-run on every render of component.</p>\n</li>\n<li><p>When state variables are used in useEffect , make sure to include in dependency array.</p>\n</li>\n<li><p>Make sure to handle side effects, with a cleanup function.</p>\n</li>\n</ol>\n</blockquote>\n<p><strong>Docs:</strong><a target=\"_blank\" href=\"https://react.dev/reference/react/useEffect#reference\">https://react.dev/reference/react/useEffect#reference</a></p>\n<h1 id=\"heading-usecontext\"><code>useContext()</code></h1>\n<p><code>useContext</code> is a way to <mark>manage state globally without passing props</mark> down through multiple levels of the component tree.</p>\n<h3 id=\"heading-the-problem\">The Problem</h3>\n<blockquote>\n<p><mark>Prop Drilling:</mark> Prop drilling refers to the process of passing down props through multiple layers of components, even when some of those components do not directly use the props. We can solve this problem using <code>useContext()</code></p>\n</blockquote>\n<h3 id=\"heading-how-to-use-it-2\">How to use it?</h3>\n<blockquote>\n<p>Three things to understand:</p>\n</blockquote>\n<ol>\n<li><p>Creating context</p>\n<pre><code class=\"lang-jsx\"> <span class=\"hljs-keyword\">const</span> EmailContext = React.createContext(<span class=\"hljs-literal\">null</span>);\n</code></pre>\n</li>\n<li><p>Provide a value for the context using ContextName.Provider</p>\n<pre><code class=\"lang-jsx\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n     <span class=\"hljs-keyword\">const</span> value = { <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"in.mohsin@outlook.com\"</span> };\n\n     <span class=\"hljs-keyword\">return</span> (\n       <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">EmailContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value}</span>&gt;</span>\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> /&gt;</span>\n       <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">EmailContext.Provider</span>&gt;</span></span>\n     );\n }\n</code></pre>\n</li>\n<li><p>Use <code>useContext()</code> in the component that needs to consume the context</p>\n<pre><code class=\"lang-jsx\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\"></span>) </span>{\n     <span class=\"hljs-keyword\">const</span> context = useContext(EmailContext);\n     <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>The email is: {context.email}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n }\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>When the context value is updated by the provider, the component consuming the context re-renders automatically. This allows the component to always have the latest data.</p>\n</blockquote>\n<p><strong>Docs:</strong><a target=\"_blank\" href=\"https://react.dev/reference/react/useContext#usage\">https://react.dev/reference/react/useContext#usage</a></p>\n","contentMarkdown":"# `useState()`\n\nThe purpose of `useState` is to handle reactive data. Any <mark>data that changes in the application is called state</mark>. When the state changes you want react to update the UI, so the latest changes are reflected to the end user.\n\n### How to use it?\n\n```jsx\nconst [count, setCount] = useState(0)\n```\n\n> `useState()` returns an array with 2 values:\n> \n> 1. Current state\n>     \n>     In our example, count is the state variable which is set to 0. This initial state can be a number, boolean, string, or object\n>     \n> 2. Set function to update the state.\n>     \n>     You can update the state in two ways:\n>     \n>     i. Directly passing the next state `setCount(2)` // Now, the updated state of\n>     \n>     count will be 2.\n>     \n>     ii. Using function `setCount( prevCount => prevCount + 1)` In this function, we check the current state which is 2. The value of `prevCount` will be 2, then\n>     \n>     we increment it by 1.\n>     \n\n**Docs:**[https://react.dev/reference/react/useState#usage](https://react.dev/reference/react/useState#usage)\n\n# `useEffect()`\n\n`useEffect`¬†is a Hook in React that allows you to <mark>synchronise a component with an external system</mark>. It is a way to handle side effects, such as fetching data or subscribing to a event in a functional component.\n\n### How to use it?\n\n```jsx\nuseEffect(() => {\n    console.log('count changed')\n},[count])\n```\n\nHere, the \\`count changed \\` will be logged every time the count changes.\n\n> `useEffect` takes two arguments:\n> \n> 1. A callback function\n>     \n>     The callback function is called after the component has rendered.\n>     \n> 2. A list of dependencies\n>     \n>     The list of dependencies is used to determine when to re-run the effect, by comparing the current values of the dependencies to the previous values.\n>     \n\nIn the callback function, you can perform any side effects, such as fetching data or subscribing to an event. You can also return a cleanup function, which is called before the component is unmounted or the effect is re-run.\n\n> Note:\n> \n> 1. If you don‚Äôt pass dependencies the effect will re-run on every render of component.\n>     \n> 2. When state variables are used in useEffect , make sure to include in dependency array.\n>     \n> 3. Make sure to handle side effects, with a cleanup function.\n>     \n\n**Docs:**[https://react.dev/reference/react/useEffect#reference](https://react.dev/reference/react/useEffect#reference)\n\n# `useContext()`\n\n`useContext` is a way to <mark>manage state globally without passing props</mark> down through multiple levels of the component tree.\n\n### The Problem\n\n> <mark>Prop Drilling:</mark> Prop drilling refers to the process of passing down props through multiple layers of components, even when some of those components do not directly use the props. We can solve this problem using `useContext()`\n\n### How to use it?\n\n> Three things to understand:\n\n1. Creating context\n    \n    ```jsx\n    const EmailContext = React.createContext(null);\n    ```\n    \n2. Provide a value for the context using ContextName.Provider\n    \n    ```jsx\n    function App() {\n        const value = { email: \"in.mohsin@outlook.com\" };\n    \n        return (\n          <EmailContext.Provider value={value}>\n            <Child />\n          </EmailContext.Provider>\n        );\n    }\n    ```\n    \n3. Use `useContext()` in the component that needs to consume the context\n    \n    ```jsx\n    function Child() {\n        const context = useContext(EmailContext);\n        return <div>The email is: {context.email}</div>;\n    }\n    ```\n    \n\n> When the context value is updated by the provider, the component consuming the context re-renders automatically. This allows the component to always have the latest data.\n\n**Docs:**[https://react.dev/reference/react/useContext#usage](https://react.dev/reference/react/useContext#usage)","brief":"useState()\nThe purpose of useState is to handle reactive data. Any data that changes in the application is called state. When the state changes you want react to update the UI, so the latest changes are reflected to the end user.\nHow to use it?\nconst...","author":"6633c2252c01edc0085a6004","sB":false,"isRepublished":false,"readTime":3,"draft":"666f1da8a241eda16102978b","tags":[],"publication":"666f1cf14b217c47fabb0339","metaTitle":"React Hooks: useState, useEffect, useContext","metaDescription":"Understand React hooks like `useState`, `useEffect`, and `useContext` for managing state, handling side effects, and avoiding prop drilling","isNewsletterActivated":true,"coAuthors":[],"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1719681839583/1a3df9b2-0f88-4d7c-bb69-ddae349cdd4e.jpeg","dateUpdated":"2024-12-20T03:41:21.073Z","hasCustomDate":false,"ogImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1719681882579/ef191a12-1475-450e-9e80-7b48662901c9.jpeg","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"6680414c46abbd804aa29d91"}]}